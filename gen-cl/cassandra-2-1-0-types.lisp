;;;  -*- Package: cassandra -*-
;;;
;;; Autogenerated by Thrift
;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

(thrift:def-package :cassandra-2-1-0)

(cl:in-package :cassandra-2-1-0)

(thrift:def-enum "ConsistencyLevel"
  (("ZERO" . 0)
   ("ONE" . 1)
   ("QUORUM" . 2)
   ("DCQUORUM" . 3)
   ("DCQUORUMSYNC" . 4)
   ("ALL" . 5)
   ("ANY" . 6)))

(thrift:def-struct "column"
  "Basic unit of data within a ColumnFamily.
@param name. A column name can act both as structure (a label) or as data (like value). Regardless, the name of the column
       is used as a key to its value.
@param value. Some data
@param timestamp. Used to record when data was sent to be written.
"
  (("name" nil :type string :id 1)
   ("value" nil :type string :id 2)
   ("timestamp" nil :type i64 :id 3)))

(thrift:def-struct "supercolumn"
  "A named list of columns.
@param name. see Column.name.
@param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
                Columns within a super column do not have to have matching structures (similarly named child columns).
"
  (("name" nil :type string :id 1)
   ("columns" nil :type (thrift:list (struct "column")) :id 2)))

(thrift:def-struct "columnorsupercolumn"
  "Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
single query methods that may return either a SuperColumn or Column.

@param column. The Column returned by get() or get_slice().
@param super_column. The SuperColumn returned by get() or get_slice().
"
  (("column" nil :type (struct "column") :id 1 :optional t)
   ("super_column" nil :type (struct "supercolumn") :id 2 :optional t)))

(thrift:def-exception "notfoundexception"
  "A specific column was requested that does not exist.
"
  ())

(thrift:def-exception "invalidrequestexception"
  "Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
why contains an associated error message.
"
  (("why" nil :type string :id 1)))

(thrift:def-exception "unavailableexception"
  "Not all the replicas required could be created and/or read.
"
  ())

(thrift:def-exception "timedoutexception"
  "RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
"
  ())

(thrift:def-exception "authenticationexception"
  "invalid authentication request (user does not exist or credentials invalid)
"
  (("why" nil :type string :id 1)))

(thrift:def-exception "authorizationexception"
  "invalid authorization request (user does not have access to keyspace)
"
  (("why" nil :type string :id 1)))

(thrift:def-struct "columnparent"
  "ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine
ColumnParent as ColumnPath + '/../'.

See also <a href='cassandra.html#Struct_ColumnPath'>ColumnPath</a>
"
  (("column_family" nil :type string :id 3)
   ("super_column" nil :type string :id 4 :optional t)))

(thrift:def-struct "columnpath"
  "The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
ColumnParent in terms of a directory structure.

ColumnPath is used to looking up a single column.

@param column_family. The name of the CF of the column being looked up.
@param super_column. The super column name.
@param column. The column name.
"
  (("column_family" nil :type string :id 3)
   ("super_column" nil :type string :id 4 :optional t)
   ("column" nil :type string :id 5 :optional t)))

(thrift:def-struct "slicerange"
  "A slice range is a structure that stores basic range, ordering and limit information for a query that will return
multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY

@param start. The column name to start the slice with. This attribute is not required, though there is no default value,
              and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
              must a valid value under the rules of the Comparator defined for the given ColumnFamily.
@param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
               and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
               must also be a valid value to the ColumnFamily Comparator.
@param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
@param count. How many keys to return. Similar to LIMIT 100 in SQL. May be arbitrarily large, but Thrift will
              materialize the whole result into memory before returning it to the client, so be aware that you may
              be better served by iterating through slices by passing the last value of one call in as the 'start'
              of the next instead of increasing 'count' arbitrarily large.
"
  (("start" nil :type string :id 1)
   ("finish" nil :type string :id 2)
   ("reversed" nil :type bool :id 3)
   ("count" 100 :type i32 :id 4)))

(thrift:def-struct "slicepredicate"
  "A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
which is described as 'a property that the elements of a set have in common.'

SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
specified, slice_range is ignored.

@param column_name. A list of column names to retrieve. This can be used similar to Memcached's 'multi-get' feature
                    to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
                    and 'Jim' you can pass those column names as a list to fetch all three at once.
@param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
"
  (("column_names" nil :type (thrift:list string) :id 1 :optional t)
   ("slice_range" nil :type (struct "slicerange") :id 2 :optional t)))

(thrift:def-struct "keyrange"
  "The semantics of start keys and tokens are slightly different.
Keys are start-inclusive; tokens are start-exclusive.  Token
ranges may also wrap -- that is, the end token may be less
than the start one.  Thus, a range from keyX to keyX is a
one-element range, but a range from tokenY to tokenY is the
full ring.
"
  (("start_key" nil :type string :id 1 :optional t)
   ("end_key" nil :type string :id 2 :optional t)
   ("start_token" nil :type string :id 3 :optional t)
   ("end_token" nil :type string :id 4 :optional t)
   ("count" 100 :type i32 :id 5)))

(thrift:def-struct "keyslice"
  "A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.

@param key. a row key
@param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
                a SlicePredicate.
"
  (("key" nil :type string :id 1)
   ("columns" nil :type (thrift:list (struct "columnorsupercolumn")) :id 2)))

(thrift:def-struct "deletion"
  (("timestamp" nil :type i64 :id 1)
   ("super_column" nil :type string :id 2 :optional t)
   ("predicate" nil :type (struct "slicepredicate") :id 3 :optional t)))

(thrift:def-struct "mutation"
  "A Mutation is either an insert, represented by filling column_or_supercolumn, or a deletion, represented by filling the deletion attribute.
@param column_or_supercolumn. An insert to a column or supercolumn
@param deletion. A deletion of a column or supercolumn
"
  (("column_or_supercolumn" nil :type (struct "columnorsupercolumn") :id 1 :optional t)
   ("deletion" nil :type (struct "deletion") :id 2 :optional t)))

(thrift:def-struct "tokenrange"
  (("start_token" nil :type string :id 1)
   ("end_token" nil :type string :id 2)
   ("endpoints" nil :type (thrift:list string) :id 3)))

(thrift:def-struct "authenticationrequest"
  "Authentication requests can contain any data, dependent on the AuthenticationBackend used
"
  (("credentials" nil :type (thrift:map string string) :id 1)))

(thrift:def-service "Cassandra" nil
  (:method "login" ((("keyspace" string 1) ("auth_request" (struct "authenticationrequest") 2)) void)
   :exceptions (("authnx" nil :type (struct "authenticationexception") :id 1)
   ("authzx" nil :type (struct "authorizationexception") :id 2)))
  (:method "get" ((("keyspace" string 1) ("key" string 2) ("column_path" (struct "columnpath") 3) ("consistency_level" (enum "ConsistencyLevel") 4)) (struct "columnorsupercolumn"))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("nfe" nil :type (struct "notfoundexception") :id 2)
   ("ue" nil :type (struct "unavailableexception") :id 3)
   ("te" nil :type (struct "timedoutexception") :id 4))
   :documentation "Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is
the only method that can throw an exception under non-failure conditions.)
")
  (:method "get_slice" ((("keyspace" string 1) ("key" string 2) ("column_parent" (struct "columnparent") 3) ("predicate" (struct "slicepredicate") 4) ("consistency_level" (enum "ConsistencyLevel") 5)) (thrift:list (struct "columnorsupercolumn")))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
pair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.
")
  (:method "multiget" ((("keyspace" string 1) ("keys" (thrift:list string) 2) ("column_path" (struct "columnpath") 3) ("consistency_level" (enum "ConsistencyLevel") 4)) (thrift:map string (struct "columnorsupercolumn")))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Perform a get for column_path in parallel on the given list<string> keys. The return value maps keys to the
ColumnOrSuperColumn found. If no value corresponding to a key is present, the key will still be in the map, but both
the column and super_column references of the ColumnOrSuperColumn object it maps to will be null.
@deprecated; use multiget_slice
")
  (:method "multiget_slice" ((("keyspace" string 1) ("keys" (thrift:list string) 2) ("column_parent" (struct "columnparent") 3) ("predicate" (struct "slicepredicate") 4) ("consistency_level" (enum "ConsistencyLevel") 5)) (thrift:map string (thrift:list (struct "columnorsupercolumn"))))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Performs a get_slice for column_parent and predicate for the given keys in parallel.
")
  (:method "get_count" ((("keyspace" string 1) ("key" string 2) ("column_parent" (struct "columnparent") 3) ("consistency_level" (enum "ConsistencyLevel") 4)) i32)
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "returns the number of columns for a particular <code>key</code> and <code>ColumnFamily</code> or <code>SuperColumn</code>.
")
  (:method "get_range_slice" ((("keyspace" string 1) ("column_parent" (struct "columnparent") 2) ("predicate" (struct "slicepredicate") 3) ("start_key" string 4) ("finish_key" string 5) ("row_count" i32 6) ("consistency_level" (enum "ConsistencyLevel") 7)) (thrift:list (struct "keyslice")))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "returns a subset of columns for a range of keys.
@Deprecated.  Use get_range_slices instead
")
  (:method "get_range_slices" ((("keyspace" string 1) ("column_parent" (struct "columnparent") 2) ("predicate" (struct "slicepredicate") 3) ("range" (struct "keyrange") 4) ("consistency_level" (enum "ConsistencyLevel") 5)) (thrift:list (struct "keyslice")))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "returns a subset of columns for a range of keys.
")
  (:method "insert" ((("keyspace" string 1) ("key" string 2) ("column_path" (struct "columnpath") 3) ("value" string 4) ("timestamp" i64 5) ("consistency_level" (enum "ConsistencyLevel") 6)) void)
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Insert a Column consisting of (column_path.column, value, timestamp) at the given column_path.column_family and optional
column_path.super_column. Note that column_path.column is here required, since a SuperColumn cannot directly contain binary
values -- it can only contain sub-Columns.
")
  (:method "batch_insert" ((("keyspace" string 1) ("key" string 2) ("cfmap" (thrift:map string (thrift:list (struct "columnorsupercolumn"))) 3) ("consistency_level" (enum "ConsistencyLevel") 4)) void)
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Insert Columns or SuperColumns across different Column Families for the same row key. batch_mutation is a
map<string, list<ColumnOrSuperColumn>> -- a map which pairs column family names with the relevant ColumnOrSuperColumn
objects to insert.
@deprecated; use batch_mutate instead
")
  (:method "remove" ((("keyspace" string 1) ("key" string 2) ("column_path" (struct "columnpath") 3) ("timestamp" i64 4) ("consistency_level" (enum "ConsistencyLevel") 5)) void)
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
")
  (:method "batch_mutate" ((("keyspace" string 1) ("mutation_map" (thrift:map string (thrift:map string (thrift:list (struct "mutation")))) 2) ("consistency_level" (enum "ConsistencyLevel") 3)) void)
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1)
   ("ue" nil :type (struct "unavailableexception") :id 2)
   ("te" nil :type (struct "timedoutexception") :id 3))
   :documentation "  Mutate many columns or super columns for many row keys. See also: Mutation.

  mutation_map maps key to column family to a list of Mutation objects to take place at that scope.
*
")
  (:method "get_string_property" ((("property" string 1)) string)
   :documentation "get property whose value is of type string. @Deprecated
")
  (:method "get_string_list_property" ((("property" string 1)) (thrift:list string))
   :documentation "get property whose value is list of strings. @Deprecated
")
  (:method "describe_keyspaces" (() (thrift:set string))
   :documentation "list the defined keyspaces in this cluster
")
  (:method "describe_cluster_name" (() string)
   :documentation "get the cluster name
")
  (:method "describe_version" (() string)
   :documentation "get the thrift api version
")
  (:method "describe_ring" ((("keyspace" string 1)) (thrift:list (struct "tokenrange")))
   :exceptions (("ire" nil :type (struct "invalidrequestexception") :id 1))
   :documentation "get the token ring: a map of ranges to host addresses,
represented as a set of TokenRange instead of a map from range
to list of endpoints, because you can't use Thrift structs as
map keys:
https://issues.apache.org/jira/browse/THRIFT-162

for the same reason, we can't return a set here, even though
order is neither important nor predictable.
")
  (:method "describe_keyspace" ((("keyspace" string 1)) (thrift:map string (thrift:map string string)))
   :exceptions (("nfe" nil :type (struct "notfoundexception") :id 1))
   :documentation "describe specified keyspace
")
  (:method "describe_splits" ((("start_token" string 1) ("end_token" string 2) ("keys_per_split" i32 3)) (thrift:list string))
   :documentation "experimental API for hadoop/parallel query support.
may change violently and without warning.

returns list of token strings such that first subrange is (list[0], list[1]],
next is (list[1], list[2]], etc.
"))
